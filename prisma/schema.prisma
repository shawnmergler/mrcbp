generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

/* ───────────────────── Enums ───────────────────── */

enum ExerciseType {
  // legacy (keep so old rows remain valid)
  MCQ
  IMAGE_ID
  ORDERING
  CALC
  TERMS

  // advanced
  MULTI_SELECT
  TRUE_FALSE
  SHORT_ANSWER
  CLOZE
  MATCHING
  DRAG_DROP
}

/* ───────────────────── Core Models ───────────────────── */

model User {
  id            String    @id @default(cuid()) // keep String to match existing FKs
  email         String?                          // keep optional; existing NULLs in DB
  name          String?
  displayName   String?
  lastActiveUTC DateTime?                        // legacy column retained
  xp            Int        @default(0)
  streak        Int?                               // legacy column preserved
  createdAt     DateTime   @default(now())

  // relations
  attempts      Attempt[]
  srsItems      SRSItem[]
  progress      Progress[]
  leaderboard   LeaderboardEntry[]
}

model Section {
  id        Int       @id @default(autoincrement())
  title     String
  position  Int?
  createdAt DateTime  @default(now())

  lessons   Lesson[]
}

model Division {
  id       Int      @id @default(autoincrement())
  // keep original DB column names to avoid drop
  csiCode  String?
  name     String?
}

model Lesson {
  id          Int        @id @default(autoincrement())
  title       String
  description String?

  // keep both hierarchies: Section (new) and Division (legacy)
  sectionId   Int?
  section     Section?   @relation(fields: [sectionId], references: [id], onDelete: SetNull)

  divisionId  Int?                                    // legacy
  division    Division? @relation(fields: [divisionId], references: [id], onDelete: SetNull)

  slug        String?                                 // legacy
  system      String?                                 // keep as String to match DB (avoids drop/recreate)

  createdAt   DateTime   @default(now())

  // back-relations
  exercises   Exercise[]
  progress    Progress[]

  @@index([sectionId])
  @@index([divisionId])
}

model Exercise {
  id          Int           @id @default(autoincrement())
  lessonId    Int?
  lesson      Lesson?       @relation(fields: [lessonId], references: [id], onDelete: SetNull)

  type        ExerciseType
  prompt      String
  explanation String?       // new, optional (safe)

  // legacy payloads kept
  answer      Json?
  data        Json?

  createdAt   DateTime      @default(now())

  // back-relations
  attempts    Attempt[]     @relation("ExerciseAttempts")
  srsItems    SRSItem[]     @relation("ExerciseSRS")

  @@index([lessonId])
}

model Attempt {
  id          Int       @id @default(autoincrement())

  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  exerciseId  Int
  exercise    Exercise  @relation("ExerciseAttempts", fields: [exerciseId], references: [id], onDelete: Cascade)

  correct     Boolean
  response    Json?       // legacy
  createdAt   DateTime    @default(now())

  @@index([userId])
  @@index([exerciseId])
}

model SRSItem {
  id             Int       @id @default(autoincrement())

  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  exerciseId     Int
  exercise       Exercise  @relation("ExerciseSRS", fields: [exerciseId], references: [id], onDelete: Cascade)

  // legacy columns preserved
  dueDate        DateTime?
  interval       Int?
  ef             Float?
  reps           Int        @default(0) @map("repetition") // map to legacy column name
  // richer optional fields (safe)
  lastReviewedAt DateTime?
  nextReviewAt   DateTime?

  createdAt      DateTime   @default(now())

  // avoid adding new unique constraints during Vercel build
  // @@unique([userId, exerciseId])

  @@index([userId])
  @@index([exerciseId])
  @@index([dueDate])
  @@index([nextReviewAt])
}

model Progress {
  id        Int      @id @default(autoincrement())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  status    String?
  updatedAt DateTime @default(now()) // has default, safe to push

  @@index([userId])
  @@index([lessonId])
}

model LeaderboardEntry {
  id        Int      @id @default(autoincrement())

  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  name      String?
  xp        Int      @default(0)
  streak    Int      @default(0)

  createdAt DateTime @default(now())

  @@index([userId])
}

model Standard {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  url         String
  mime        String?
  category    String?
  createdAt   DateTime @default(now())
}

/* ───────────────────── Legacy/aux tables ───────────────────── */

model Badge {
  id          Int      @id @default(autoincrement())
  name        String    // remove @unique to avoid adding a new constraint
  code        String?   // keep legacy column so it’s not dropped
  icon        String?
  description String?
  createdAt   DateTime @default(now())
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String    // remove @unique to avoid new constraint
  description String?
  level       Int?      // keep legacy column so it’s not dropped
  system      String?   // keep legacy column so it’s not dropped
}
