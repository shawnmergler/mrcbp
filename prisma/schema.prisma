generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

/**
 * Keep existing enum values to avoid data-loss on db push,
 * and add new ones for advanced question types.
 */
enum ExerciseType {
  // legacy values (do not remove)
  MCQ
  IMAGE_ID
  ORDERING
  CALC
  TERMS

  // new/advanced types
  MULTI_SELECT
  TRUE_FALSE
  SHORT_ANSWER
  CLOZE
  MATCHING
  DRAG_DROP
}

/**
 * Core user. Keep id as String (cuid) to match earlier relations.
 * Keep email optional to avoid breaking existing NULLs.
 * Keep lastActiveUTC to prevent “drop column” warnings.
 */
model User {
  id            String             @id @default(cuid())
  email         String?            @unique
  name          String?
  displayName   String?
  lastActiveUTC DateTime?
  xp            Int                @default(0)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  // relations
  attempts      Attempt[]
  srsItems      SRSItem[]
  progress      Progress[]
  leaderboard   LeaderboardEntry[]
}

/**
 * Top-level grouping for lessons.
 */
model Section {
  id        Int      @id @default(autoincrement())
  title     String
  position  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lessons   Lesson[]
}

/**
 * A learnable unit. Keep slug & system optional to avoid drops.
 * Keep sectionId optional so we don't fail on existing rows.
 */
model Lesson {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  sectionId   Int?
  section     Section?   @relation(fields: [sectionId], references: [id], onDelete: SetNull)

  // legacy columns preserved
  slug        String?
  system      String?

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // relations
  exercises   Exercise[]
  progress    Progress[]   // back-relation for Progress.lesson
}

/**
 * An authored exercise/question. Keep legacy 'answer' & 'data' to avoid drops.
 * Add 'explanation' for richer authoring.
 */
model Exercise {
  id          Int          @id @default(autoincrement())
  lessonId    Int?
  lesson      Lesson?      @relation(fields: [lessonId], references: [id], onDelete: SetNull)

  type        ExerciseType
  prompt      String
  explanation String?      // new

  // legacy payloads (preserved)
  answer      Json?
  data        Json?

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // back-relations
  attempts    Attempt[]    @relation("ExerciseAttempts")
  srsItems    SRSItem[]    @relation("ExerciseSRS")

  @@index([lessonId])
}

/**
 * A user’s attempt at an exercise. Keep 'response' & 'createdAt' to avoid drops.
 */
model Attempt {
  id          Int       @id @default(autoincrement())

  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  exerciseId  Int
  exercise    Exercise  @relation("ExerciseAttempts", fields: [exerciseId], references: [id], onDelete: Cascade)

  correct     Boolean
  response    Json?     // legacy (preserved)
  createdAt   DateTime  @default(now())

  @@index([userId])
  @@index([exerciseId])
}

/**
 * Spaced-repetition scheduling for an exercise per user.
 * Keep dueDate, interval, ef to avoid drops; add richer fields alongside.
 */
model SRSItem {
  id             Int       @id @default(autoincrement())

  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  exerciseId     Int
  exercise       Exercise  @relation("ExerciseSRS", fields: [exerciseId], references: [id], onDelete: Cascade)

  // legacy columns (preserved)
  dueDate        DateTime?
  interval       Int?
  ef             Float?

  // richer scheduling
  reps           Int       @default(0)
  lastReviewedAt DateTime?
  nextReviewAt   DateTime?

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@unique([userId, exerciseId])
  @@index([dueDate])
  @@index([nextReviewAt])
}

/**
 * Per-lesson progress per user.
 */
model Progress {
  id        Int      @id @default(autoincrement())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  status    String?
  updatedAt DateTime @default(now())

  @@index([userId])
  @@index([lessonId])
}

/**
 * Leaderboard row with optional linkage to a user.
 * Keep opposite on User via `leaderboard` field.
 */
model LeaderboardEntry {
  id        Int      @id @default(autoincrement())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  name      String?
  xp        Int      @default(0)
  streak    Int      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

/**
 * Company standards / documents.
 * Keep createdAt for legacy rows; allow optional category & mime.
 */
model Standard {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  url         String
  mime        String?
  category    String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

/**
 * CSI divisions. Minimal model retained to avoid data-loss warnings.
 */
model Division {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  label     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * Legacy tables retained so Prisma won't try to drop them.
 * If you don’t use these, you can later remove them with a migration.
 */
model Badge {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  icon        String?
  description String?
  createdAt   DateTime @default(now())
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
}
