generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

/**
 * Keep legacy enum values so old rows remain valid,
 * and include advanced types you’re using now.
 */
enum ExerciseType {
  // legacy
  MCQ
  IMAGE_ID
  ORDERING
  CALC
  TERMS

  // advanced
  MULTI_SELECT
  TRUE_FALSE
  SHORT_ANSWER
  CLOZE
  MATCHING
  DRAG_DROP
}

/* ─────────────────────────  CORE MODELS  ───────────────────────── */

model User {
  id            String   @id @default(cuid())      // stays String to match existing FK types
  email         String?  @unique                   // keep optional (existing NULLs)
  name          String?
  displayName   String?
  lastActiveUTC DateTime?                          // legacy column retained
  xp            Int       @default(0)
  createdAt     DateTime  @default(now())          // safe to add/keep (has default)

  // relations
  attempts      Attempt[]
  srsItems      SRSItem[]
  progress      Progress[]
  leaderboard   LeaderboardEntry[]
}

model Section {
  id        Int      @id @default(autoincrement())
  title     String
  position  Int?
  createdAt DateTime @default(now())

  lessons   Lesson[]
}

/**
 * Keep slug/system (legacy) and make sectionId optional so we don't
 * break existing rows that may not have a section yet.
 */
model Lesson {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  sectionId   Int?
  section     Section?   @relation(fields: [sectionId], references: [id], onDelete: SetNull)

  // legacy columns preserved
  slug        String?
  system      String?

  createdAt   DateTime   @default(now())

  // back-relations
  exercises   Exercise[]
  progress    Progress[]   // for Progress.lesson

  @@index([sectionId])
}

/**
 * Keep legacy answer/data; add explanation.
 * NOTE: Omit required updatedAt to avoid Vercel “cannot execute” errors.
 */
model Exercise {
  id          Int          @id @default(autoincrement())
  lessonId    Int?
  lesson      Lesson?      @relation(fields: [lessonId], references: [id], onDelete: SetNull)

  type        ExerciseType
  prompt      String
  explanation String?      // new field

  // legacy payloads (preserved)
  answer      Json?
  data        Json?

  createdAt   DateTime     @default(now())

  // back-relations
  attempts    Attempt[]    @relation("ExerciseAttempts")
  srsItems    SRSItem[]    @relation("ExerciseSRS")

  @@index([lessonId])
}

/**
 * Keep response & createdAt (legacy). Avoid adding updatedAt (required).
 */
model Attempt {
  id          Int       @id @default(autoincrement())

  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  exerciseId  Int
  exercise    Exercise  @relation("ExerciseAttempts", fields: [exerciseId], references: [id], onDelete: Cascade)

  correct     Boolean
  response    Json?     // legacy
  createdAt   DateTime  @default(now())

  @@index([userId])
  @@index([exerciseId])
}

/**
 * Keep dueDate/interval/ef (legacy). Add richer SRS fields.
 * Avoid adding a required updatedAt column (omit it).
 */
model SRSItem {
  id             Int       @id @default(autoincrement())

  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  exerciseId     Int
  exercise       Exercise  @relation("ExerciseSRS", fields: [exerciseId], references: [id], onDelete: Cascade)

  // legacy columns (preserved)
  dueDate        DateTime?
  interval       Int?
  ef             Float?

  // richer scheduling (safe defaults / optional)
  reps           Int       @default(0)
  lastReviewedAt DateTime?
  nextReviewAt   DateTime?

  createdAt      DateTime  @default(now())

  @@unique([userId, exerciseId])
  @@index([dueDate])
  @@index([nextReviewAt])
}

/**
 * Per-lesson progress per user.
 * Keep updatedAt with default(now()) so it’s executable (has default).
 */
model Progress {
  id        Int      @id @default(autoincrement())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  status    String?
  updatedAt DateTime @default(now())

  @@index([userId])
  @@index([lessonId])
}

/**
 * Optional FK to User; opposite side on User.leaderboard.
 * Avoid updatedAt (required) to keep push executable.
 */
model LeaderboardEntry {
  id        Int      @id @default(autoincrement())

  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  name      String?
  xp        Int      @default(0)
  streak    Int      @default(0)

  createdAt DateTime @default(now())

  @@index([userId])
}

/**
 * Standards/documents. Keep createdAt; omit updatedAt (required).
 */
model Standard {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  url         String
  mime        String?
  category    String?

  createdAt   DateTime @default(now())
}

/* ───────────────────────  CSI / LEGACY TABLES  ─────────────────────── */

/**
 * Division currently has 12 rows in your DB. To avoid “cannot execute”
 * on adding required fields, keep everything optional (nullable) here.
 * You can tighten this later with a proper migration.
 */
model Division {
  id    Int     @id @default(autoincrement())
  code  String?
  label String?
}

/**
 * Legacy tables retained so Prisma won’t attempt dropping them.
 */
model Badge {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  icon        String?
  description String?
  createdAt   DateTime @default(now())
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
}
