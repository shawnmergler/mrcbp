generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//// Enums ////////////////////////////////////////////////////////////////

// Keep legacy variants so db push does NOT try to remove them.
// Add your newer types alongside.
enum ExerciseType {
  // legacy â€“ keep
  MCQ
  IMAGE_ID
  ORDERING
  CALC
  TERMS

  // new / current
  SINGLE_SELECT
  MULTI_SELECT
  ORDER
  NUMERIC
  MATCHING
  SHORT_ANSWER
}

//// Core domain //////////////////////////////////////////////////////////

model User {
  id             String           @id @default(cuid())
  email          String?          // keep optional to avoid destructive changes if NULLs exist
  name           String?
  displayName    String?

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // relations
  attempts       Attempt[]
  srsItems       SRSItem[]
  progress       Progress[]
  leaderboard    LeaderboardEntry[]

  // legacy (kept to avoid drops)
  lastActiveUTC  DateTime?        @ignore
}

model Section {
  id         Int       @id @default(autoincrement())
  title      String
  slug       String    @unique
  order      Int       @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  lessons    Lesson[]
}

model Lesson {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  sectionId   Int?       // optional to avoid destructive change on existing rows
  section     Section?   @relation(fields: [sectionId], references: [id], onDelete: SetNull)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  exercises   Exercise[]

  // legacy columns (kept to avoid drops)
  slug        String?    @ignore
  system      String?    @ignore
}

model Exercise {
  id          Int            @id @default(autoincrement())
  lessonId    Int
  lesson      Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  type        ExerciseType
  prompt      String
  explanation String?

  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // back-relations (named to satisfy earlier validation errors)
  attempts    Attempt[]      @relation("ExerciseAttempts")
  srsItems    SRSItem[]      @relation("ExerciseSRS")

  // advanced-type children (optional per type)
  choices     ExerciseChoice[]
  matchPairs  ExerciseMatchingPair[]
  orderItems  ExerciseOrderItem[]
  numeric     ExerciseNumeric?
  shortAnswer ExerciseShortAnswer?

  // legacy payloads (kept to avoid drops)
  answer      Json?          @ignore
  data        Json?          @ignore
}

model Attempt {
  id          Int        @id @default(autoincrement())

  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  exerciseId  Int
  exercise    Exercise   @relation("ExerciseAttempts", fields: [exerciseId], references: [id], onDelete: Cascade)

  correct     Boolean
  submittedAt DateTime   @default(now())

  // legacy (kept to avoid drops)
  createdAt   DateTime?  @ignore
  response    Json?      @ignore
}

model SRSItem {
  id          Int        @id @default(autoincrement())

  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  exerciseId  Int
  exercise    Exercise   @relation("ExerciseSRS", fields: [exerciseId], references: [id], onDelete: Cascade)

  repetition  Int        @default(0)
  streak      Int        @default(0)
  lastReviewed DateTime?
  nextReview   DateTime?

  // legacy SM2-style fields (kept to avoid drops)
  dueDate     DateTime?  @ignore
  ef          Float?     @ignore
  interval    Int?       @ignore
}

model Progress {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  status    String?  // keep flexible to avoid enum churn
  updatedAt DateTime @default(now())
}

model LeaderboardEntry {
  id        Int      @id @default(autoincrement())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  name      String?
  xp        Int      @default(0)
  streak    Int      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//// Advanced exercise subtypes //////////////////////////////////////////

// For SINGLE_SELECT / MULTI_SELECT
model ExerciseChoice {
  id         Int       @id @default(autoincrement())
  exerciseId Int
  exercise   Exercise  @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  text       String
  isCorrect  Boolean   @default(false)
  order      Int       @default(0)

  @@index([exerciseId])
}

// For MATCHING
model ExerciseMatchingPair {
  id         Int       @id @default(autoincrement())
  exerciseId Int
  exercise   Exercise  @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  leftText   String
  rightText  String
  order      Int       @default(0)

  @@index([exerciseId])
}

// For ORDER
model ExerciseOrderItem {
  id         Int       @id @default(autoincrement())
  exerciseId Int
  exercise   Exercise  @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  text       String
  position   Int

  @@index([exerciseId])
}

// For NUMERIC (one row per exercise)
model ExerciseNumeric {
  exerciseId Int       @id
  exercise   Exercise  @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  value      Float
  tolerance  Float?
}

// For SHORT_ANSWER (one row per exercise)
model ExerciseShortAnswer {
  exerciseId        Int      @id
  exercise          Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  acceptableAnswers Json     // e.g. ["OSHA", "O.S.H.A."] (case-insensitive compare in app)
}

//// Other app data ///////////////////////////////////////////////////////

model Standard {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  url         String
  mime        String?
  createdAt   DateTime  @default(now())

  // (No 'category' field here on purpose to match existing DB/app usage.)
}

// Keep Division active (editor relies on it). Use permissive optional fields to avoid churn.
model Division {
  id        Int       @id @default(autoincrement())
  code      String?
  label     String?
  createdAt DateTime? @default(now())
}

//// Legacy tables preserved but ignored (prevents drop on db push) //////

model Badge {
  id   Int     @id @default(autoincrement())
  name String?
  @@ignore
}

model Role {
  id   Int     @id @default(autoincrement())
  name String?
  @@ignore
}
