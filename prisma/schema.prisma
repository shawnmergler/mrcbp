generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

enum ExerciseType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_THE_BLANK
  ORDERING
  MATCHING
  HOTSPOT
  FREE_RESPONSE
}

enum TrainingSystem {
  PROJECT_MANAGEMENT
  SITE_SUPERVISION
}

model User {
  id            String      @id
  email         String?     @unique
  displayName   String?
  attempts      Attempt[]
  progress      Progress[]
  srsItems      SRSItem[]
  xp            Int         @default(0)
  streak        Int         @default(0)
  lastActiveUTC DateTime?
  userBadges    UserBadge[]
  role          UserRole?
  createdAt     DateTime    @default(now())
}

model Role {
  id      Int         @id @default(autoincrement())
  system  TrainingSystem
  name    String
  level   Int
  users   UserRole[]
  lessons Lesson[]

  @@unique([system, level], name: "system_level")
}

model UserRole {
  id     Int   @id @default(autoincrement())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
  roleId Int
  role   Role   @relation(fields: [roleId], references: [id])
}

model Division {
  id       Int      @id @default(autoincrement())
  csiCode  Int
  name     String
  lessons  Lesson[]

  @@unique([csiCode])
}

model Lesson {
  id          Int     @id @default(autoincrement())
  divisionId  Int
  division    Division @relation(fields: [divisionId], references: [id])
  system      TrainingSystem
  roleId      Int?
  role        Role?    @relation(fields: [roleId], references: [id])
  title       String
  slug        String   @unique
  description String?
  exercises   Exercise[]
  progress    Progress[]
}

model Attempt {
  id          Int       @id @default(autoincrement())
  userId      String    // was Int
  user        User      @relation(fields: [userId], references: [id])
  exerciseId  Int
  exercise    Exercise  @relation("ExerciseAttempts", fields: [exerciseId], references: [id])
  correct     Boolean
  createdAt   DateTime  @default(now())
}

model Exercise {
  id           Int           @id @default(autoincrement())
  lessonId     Int
  lesson       Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  type         ExerciseType
  prompt       String
  explanation  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // back-relations
  attempts     Attempt[]     @relation("ExerciseAttempts")
  srsItems     SRSItem[]     @relation("ExerciseSRS")
}

model Progress {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  percent   Float    @default(0)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([userId, lessonId])
}

model SRSItem {
  id          Int       @id @default(autoincrement())
  userId      String    // was Int
  user        User      @relation(fields: [userId], references: [id])
  exerciseId  Int
  exercise    Exercise  @relation("ExerciseSRS", fields: [exerciseId], references: [id])
  repetition  Int       @default(0)
  interval    Int       @default(1)
  ease        Float     @default(2.5)
  dueAt       DateTime  @default(now())
}

model Badge {
  id          Int         @id @default(autoincrement())
  code        String      @unique
  name        String
  description String
  users       UserBadge[]
}

model UserBadge {
  id      Int   @id @default(autoincrement())
  userId  String
  user    User  @relation(fields: [userId], references: [id])
  badgeId Int
  badge   Badge @relation(fields: [badgeId], references: [id])

  @@unique([userId, badgeId])
}

model Standard {
  id          Int      @id @default(autoincrement())
  title       String
  url        String
  mime        String?
  description String?
  category    String?


  createdAt   DateTime @default(now())
}
